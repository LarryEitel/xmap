#!wing
#!version=4.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'cyTlbCAUmxSyeyLIVHJME2EKxq'\
        'uBTuPh',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.23283582089552235,
                 'override_title': None,
                 'pagelist': [('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'column-widths': [1.0],
                                 'expanded-nodes': [(0,)],
                                 'selected-nodes': [],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': False,
                                'wrap-lines': True}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {u'By Module': {'column-w'\
        'idths': [1.0],
        'expanded-nodes': [None,
                           None,
                           None,
                           None,
                           None],
        'selected-nodes': [None],
        'top-node': None}},
                                'browse_mode': u'By Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [2,
                          1],
        'notebook_display': 'tabs only',
        'notebook_percent': 0.3007769145394007,
        'override_title': None,
        'pagelist': [('bookmarks',
                      'wide',
                      1,
                      {'tree-state': []}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'sel-line': 2,
                       'sel-line-start': 131,
                       'selection_end': 131,
                       'selection_start': 131}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.80000000000000004,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': ''}),
                     ('python-shell',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {None: ["'asdfa;asdf'.split(';')\n"]},
                       'sel-line': 2,
                       'sel-line-start': 148,
                       'selection_end': 152,
                       'selection_start': 152}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'baudio',
                                       'fReverse': False,
                                       'fSearchText': u'max-width',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': True,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': u'xc\\templates',
                                  'fRecursive': True,
                                  'fType': 'location'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'plusone',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [loc('../_x/parts/omelette/django_openid/demos\registration_consumer/manage.py'),
                                       loc('../_x/parts/omelette/pinax/projects/sample_group_project/manage.py')],
                       'filter': '',
                       'recent-filters': None}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'column-widths': [0.65817825661116547,
        0.34182174338883448],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('../_x/xc/apps/search/views.py'),
        {'attrib-starts': [('SearchView',
                            13),
                           ('SearchView.get',
                            77)],
         'first-line': 55,
         'folded-linenos': [],
         'sel-line': 83,
         'sel-line-start': 2806,
         'selection_end': 2856,
         'selection_start': 2856},
        1322745689.77),
        (loc('../_x/xc/apps/search/views.py'),
         {'attrib-starts': [('SearchView',
                             13),
                            ('SearchView.get_url_name',
                             71)],
          'first-line': 54,
          'folded-linenos': [],
          'sel-line': 76,
          'sel-line-start': 2579,
          'selection_end': 2579,
          'selection_start': 2579},
         1322745819.994),
        (loc('../_x/xc/apps/biblewords/views.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [13,
                             73,
                             232],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 1,
          'selection_start': 1},
         1322745952.3870001),
        (loc('../_x/xc/templates/shared/cts.hamlpy'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 31,
          'sel-line-start': 854,
          'selection_end': 962,
          'selection_start': 962},
         1322746145.1700001),
        (loc('../_x/xc/apps/ctz/urls.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 4,
          'sel-line-start': 148,
          'selection_end': 176,
          'selection_start': 176},
         1322746149.3),
        (loc('../_x/xc/apps/ctz/views.py'),
         {'attrib-starts': [('wt',
                             11)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 12,
          'sel-line-start': 381,
          'selection_end': 486,
          'selection_start': 414},
         1322746151.085),
        (loc('../_x/xc/apps/bs/views.py'),
         {'attrib-starts': [('detail',
                             25)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 843,
          'selection_end': 847,
          'selection_start': 847},
         1322746163.684),
        (loc('../_x/xc/apps/ctz/views.py'),
         {'attrib-starts': [('wt',
                             11)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 25,
          'sel-line-start': 796,
          'selection_end': 853,
          'selection_start': 800},
         1322746185.6589999),
        (loc('../_x/xc/apps/bs/views.py'),
         {'attrib-starts': [('detail',
                             25)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 25,
          'sel-line-start': 745,
          'selection_end': 821,
          'selection_start': 769},
         1322746192.7460001),
        (loc('../_x/xc/apps/search/views.py'),
         {'attrib-starts': [('SearchView',
                             13),
                            ('SearchView.get',
                             77)],
          'first-line': 62,
          'folded-linenos': [],
          'sel-line': 84,
          'sel-line-start': 2826,
          'selection_end': 2871,
          'selection_start': 2871},
         1322746302.1500001),
        (loc('../_x/xc/templates/site_base.hamlpy'),
         {'attrib-starts': [],
          'first-line': 95,
          'folded-linenos': [],
          'sel-line': 114,
          'sel-line-start': 4233,
          'selection_end': 4239,
          'selection_start': 4239},
         1322771063.3940001),
        [loc('../_x/xc/templates/home/base.hamlpy'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 20,
          'sel-line-start': 505,
          'selection_end': 554,
          'selection_start': 554},
         1322771071.858],
        [loc('project-buildout/buildout.cfg'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322777682.974],
        (loc('buildout.cfg'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 453,
          'selection_end': 469,
          'selection_start': 469},
         1322779830.9189999),
        (loc('parts/buildout/site.py'),
         {'attrib-starts': [],
          'first-line': 77,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322780087.3570001),
        [loc('parts/buildout/sitecustomize.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322780097.5209999],
        [loc('parts/buildout/site.py'),
         {'attrib-starts': [],
          'first-line': 77,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322780100.2149999],
        (loc('buildout.cfg'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 453,
          'selection_end': 469,
          'selection_start': 469},
         1322780103.4489999),
        [loc('bootstrap.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1322780108.7950001],
        [loc('buildout.cfg'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 453,
          'selection_end': 469,
          'selection_start': 469},
         1322780113.6070001]],
        19),
        'current-loc': None,
        'editor-states': {},
        'has-focus': False},
                               'open_files': []},
        'split_percents': {0: 0.36757624398073835},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.64340239912759001},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (2030,
                         25,
                         1244,
                         955)},
        {'name': '83p9Um7WlmPAVVFPBNK2rwURVeb4Lumt',
         'size-state': '',
         'type': 'panel-tall',
         'view': {'area': 'window-wide',
                  'constraint': None,
                  'current_pages': [0],
                  'override_title': None,
                  'pagelist': [('debug-data',
                                'window-wide',
                                0,
                                {})],
                  'split_percents': {},
                  'splits': 1,
                  'tab_location': 'top',
                  'user_data': {}},
         'window-alloc': (3723,
                          0,
                          922,
                          657)},
        {'name': 'HnEuArLNP1hs2qECDLIBazbIzrw3Iu6h',
         'size-state': '',
         'type': 'panel-tall',
         'view': {'area': 'window-wide',
                  'constraint': None,
                  'current_pages': [0],
                  'override_title': None,
                  'pagelist': [('debug-probe',
                                'window-wide',
                                2,
                                {'attrib-starts': [],
                                 'first-line': 1,
                                 'folded-linenos': [],
                                 'history': {None: ['BBkAudio.objects.filter'\
        '(bkno = bkno).filter(bid__id = bid)\x0d\n',
        'BBkAudio.objects.filter(bid__id = bid)\x0d\n',
        'bid\x0d\n',
        'BBkAudio.objects.filter(bid__id = bid)[0].bkno\x0d\n',
        'BBkAudio.objects.filter(bid__id = bid)[0]\x0d\n',
        'c = BBkAudio.objects.filter(bid__id = bid)[0]\x0d\n',
        'BBkAudio.objects.filter(bkno = bkno).filter(bid = 29)\x0d\n',
        'BBkAudio.objects.filter(bkno = bkno)\x0d\n',
        '[i for i in BBkAudio.objects.filter(bkno = bkno)]\x0d\n',
        '[i.bid for i in BBkAudio.objects.filter(bkno = bkno)]\x0d\n',
        '[i.bid.id for i in BBkAudio.objects.filter(bkno = bkno)]\x0d\n',
        '[i.bid.bid for i in BBkAudio.objects.filter(bkno = bkno)]\x0d\n',
        'BBkAudio.objects.filter(bkno=46)\x0d\n',
        'BBkAudio.objects.filter(bkno=46).filter(bid=29)\x0d\n',
        'BBkAudio.objects.filter(bkno=46).filter(bid=1)\x0d\n',
        "BBkAudio.objects.raw('SELECT * FROM bs_bbkaudio WHERE bid =1 AND bk"\
        "no = 46')\x0d\n",
        "r = BBkAudio.objects.raw('SELECT * FROM bs_bbkaudio WHERE bid =1 AN"\
        "D bkno = 46')\x0d\n",
        "BBkAudio.objects.raw('SELECT * FROM bs_bbkaudio WHERE bid =1 AND bk"\
        "no = 46')[0]\x0d\n",
        "BBkAudio.objects.raw('SELECT * FROM bs_bbkaudio WHERE bid =1 AND bk"\
        "no = 46 LIMIT 1')\x0d\n",
        "BBkAudio.objects.raw('SELECT id FROM bs_bbkaudio WHERE bid =1 AND b"\
        "kno = 46 LIMIT 1')\x0d\n",
        "if BBkAudio.objects.raw('SELECT id FROM bs_bbkaudio WHERE bid =1 AN"\
        "D bkno = 46 LIMIT 1'):\x0d\n  print 'true'\x0d\n\x0d\n",
        "BBkAudio.objects.raw('SELECT id FROM bs_bbkaudio WHERE bid=%d AND b"\
        "kno=%d AND langkey=\"tpo-t\" LIMIT 1' % (bid, bkno))\x0d\n",
        'len(r)\x0d\n',
        'r.id\x0d\n',
        "r = \\BBkAudio.objects.raw('SELECT id FROM bs_bbkaudio WHERE bid=%d"\
        " AND bkno=%d AND langkey=\"tpo-t\" LIMIT 1' % (bid, bkno))\x0d\n",
        "r = BBkAudio.objects.raw('SELECT id FROM bs_bbkaudio WHERE bid=%d A"\
        "ND bkno=%d AND langkey=\"tpo-t\" LIMIT 1' % (bid, bkno))\x0d\n",
        'r.items()\x0d\n',
        'dir(r)\x0d\n',
        "r = BBkAudio.objects.raw('SELECT count(id) FROM bs_bbkaudio WHERE b"\
        "id=%d AND bkno=%d AND langkey=\"tpo-t\" LIMIT 1' % (bid, bkno))\x0d"\
        "\n",
        'r\x0d\n',
        "r = BBkAudio.objects.raw('SELECT count(id) as t FROM bs_bbkaudio WH"\
        "ERE bid=%d AND bkno=%d AND langkey=\"tpo-t\" LIMIT 1' % (bid, bkno)"\
        ")\x0d\n",
        'r.t\x0d\n',
        "r['t']\x0d\n",
        "bbkaudio in BBkAudio.objects.raw('SELECT id FROM bs_bbkaudio WHERE "\
        "bid=%d AND bkno=%d LIMIT 1' % (bid, bkno))\x0d\n",
        "'id' in BBkAudio.objects.raw('SELECT id FROM bs_bbkaudio WHERE bid="\
        "%d AND bkno=%d LIMIT 1' % (bid, bkno))\x0d\n",
        "'id' in BBkAudio.objects.raw('SELECT * FROM bs_bbkaudio WHERE bid=%"\
        "d AND bkno=%d LIMIT 1' % (bid, bkno))\x0d\n",
        'row[2]\x0d\n',
        'self.versions\n',
        "'DNKJB' in self.versions\n",
        "'DNKJB' in session.versions\n",
        "'versions' in self and 'DNKJB' in self.versions\n",
        'self.attrib\n',
        "self.__getattribute__('versions')\n",
        "session.__getattribute__('versions')\n",
        "session.has_key('versions')\n",
        "session['versions']\n",
        "'DNKJB' in self.__getattribute__('versidons')\n",
        'self.__dict__()\n',
        'self.__dict__\n',
        "self.__dict__()['versions']\n",
        "self.__dict__['versions']\n",
        "'versions' in self.__dict__\n",
        'self.ndxnobidtype[key]\x0d\n',
        'self.ndxnolangtype[key]\x0d\n',
        'key\x0d\n',
        'self.ndxnolangtype\x0d\n',
        'request.GET\n',
        "[v.strip() for v in request.GET['versions'].split(',')]\n",
        'from xc.apps.bs.models import B\n',
        'bs = B.LangBs()\n',
        'from django.db.models import Q\n',
        "bs = B.objects.filter(langkey='e').filter(Q(islive=1) ).all()\n",
        "slive=1) ).order_by('version').all()\n\n",
        "bs = B.objects.values_list('version').filter(langkey='e').filter(Q("\
        "islive=1) ).all()\n",
        "bs = B.objects.values('version').filter(langkey='e').filter(Q(isliv"\
        "e=1) ).all()\n",
        "bs = B.objects.values('version').filter(langkey='e').filter(Q(isliv"\
        "e=1) ).order_by('version')\n",
        '[v for v in bs[0].values()]\n',
        'bs[0]\n',
        '[v for v in bs.values()]\n',
        '[v for v in bs.keys()]\n',
        "bs = B.objects.values_list('version').filter(langkey='e').filter(Q("\
        "islive=1) ).order_by('version')\n",
        'bs\n',
        '[v for v in bs.iterator()]\n',
        '[v[0] for v in bs.iterator()]\n',
        "request.GET['version_%d' % i]\n",
        "'-all' in request.GET['version_%d' % i]\n",
        "newversion = request.GET['version_%d' % i]\n",
        "newversion.replace('-all', '')\n",
        "all', '')\nnewversion\n\n",
        'newversion\n',
        'new = versions\n',
        "new = ['a', 'b']\n",
        'versions.insert(1, new)\n',
        "v = [u'NWT-e', u'ASV', u'NWT-s']\n",
        'for i, v in enumerate(n):\n  print i,v\n\n',
        'for i, v in enumerate(v):\n  print i,v\n\n',
        "for i, v in enumerate(['a','b']):\n  print i,v\n\n",
        "versions = [u'NWT-e', u'ASV', u'NWT-s']\ninsertat = 1\nfor i, v in "\
        "enumerate(['a','b']):\n\tversions.insert(insertat, v[i])\n\tinserta"\
        "t += 1\nversions\n\n",
        "versions = [u'NWT-e', u'ASV', u'NWT-s']\n",
        'insertat = 1\n',
        "for i, v in enumerate(['a','b']):\n\tversions.insert(insertat, v[i]"\
        ")\n\tinsertat += 1\n\n",
        "versions = [u'NWT-e', u'ASV', u'NWT-s']\ninsertat = 1\nfor i, v in "\
        "enumerate(['a','b']):\n\tversions.insert(insertat, v)\n\tinsertat +"\
        "= 1\nversions\n\n",
        'del versions[i]\n',
        'versions\n',
        'datetime.now()\x0d\n',
        'jwdate.mondayweekof(datetime.now())\x0d\n',
        'datetime.strptime(datetime.now(), "%Y%m%d")\x0d\n',
        'datetime.strptime(jwdate.mondayweekof(datetime.now()), "%Y%m%d")\x0d'\
        '\n',
        'jwdate.datebeginmonday(datetime.now())\x0d\n',
        "search_query.strip('.-_: ')\x0d\n"],
        u'file:C:/Python27/Lib/site-packages/xchg/ctzr/cts.py': ['len(src)\n',
        "ctraw.raw[0:ctraw.match.start('dash')-1]\n",
        "ctraw.raw[0:ctraw.match.start('dash')-2]\n",
        "ctraw.raw[ctraw.match.end('dash'):].strip()\n",
        "ctraw.raw[ctraw.match.end('dash')-2:].strip()\n",
        "ctraw.match.end('dash')\n",
        "matchrange.group('dash')\n",
        "src[match.start('continuationchaptervsnos'):]\n",
        'ctraw.beg\n',
        "match.start('continuationchaptervsnos')\n",
        'src[16:]\n',
        "matchrange.start('dash')\n",
        'matchrange.start()\n',
        "match.end('continuationchaptervsnos')\n",
        "src[match.start('continuationchaptervsnos'):match.start('continuati"\
        "onchaptervsnos')]\n",
        'ctsegs[-1]\n',
        "ctsegs[-1]['bkkey']\n",
        'ctsegs[-1].bkkey\n',
        "self.cts[0]['bkkey']\n",
        'chs[c+1]\n',
        'vs\n',
        "ctraw.raw[ctraw.match.end('dash'):]\n",
        "src[match.start('continuationchaptervsnos'):match.end('continuation"\
        "chaptervsnos')]\n",
        'match.start()\n',
        'match.end()\n',
        'src[match.start():match.end()]\n',
        "ctraw.match.group('dash')\n",
        "ctraw.match.start('dash')\n",
        'ctraw.raw\n',
        'ctraw.match.group()\n',
        'ctraw.match.start()\n',
        'ctraw.raw[12:]\n',
        'cts.allerrors()\n',
        "src[match.start('bkname'):match.end()]\n",
        'matchrange.group()\n',
        "match.group('bkname')\n",
        'tmpct[0]\n',
        'tmpct\n',
        'tmpct[0].chnoss\n',
        'match.group()[-0]\n',
        'match.group()[-1]\n',
        "bkNames.regexpbknos('63', '~f', langkey)\n",
        "'bknamesinglechapterothers' in match\n",
        "'bknamesinglechapterothers' in match.groups\n",
        "'bknamesinglechapterothers' in match.groupdict\n",
        "'bknamesinglechapterothers' in match.groupdict()\n",
        'if re.search("\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83\xa4|\xe3'\
        '\x83\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb3|\xe3\x83\xa6'\
        '\xe3\x83\x80", html, re.IGNORECASE):\n',
        'import re\n',
        "re.search(\"\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83\xa4|\xe3\x83"\
        "\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb3|\xe3\x83\xa6\xe3"\
        "\x83\x80\", '\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83\xa41 \xe3"\
        "\x83\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb31 \xe3\x83\xa6"\
        "\xe3\x83\x801', re.IGNORECASE)\n",
        "re.match(\"\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83\xa4|\xe3\x83"\
        "\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb3|\xe3\x83\xa6\xe3"\
        "\x83\x80\", '\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83\xa41 \xe3"\
        "\x83\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb31 \xe3\x83\xa6"\
        "\xe3\x83\x801', re.IGNORECASE)\n",
        "m = re.match(\"\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83\xa4|\xe3"\
        "\x83\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb3|\xe3\x83\xa6"\
        "\xe3\x83\x80\", '\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83\xa41 "\
        "\xe3\x83\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb31 \xe3\x83"\
        "\xa6\xe3\x83\x801', re.IGNORECASE)\n",
        "src.encode('cp852')\n",
        "src.decode('cp852')\n",
        'i="w\\xc4\\x85\\xc5\\xbc"\n',
        'i\n',
        "i.decode('utf-8')\n",
        "i.decode('utf-8').encode('utf-8')\n",
        "m = self.regobjsrc.match('\xe3\x82\xaa\xe3\x83\x90\xe3\x83\x87\xe3\x83"\
        "\xa41 \xe3\x83\x95\xe3\x82\xa3\xe3\x83\xac\xe3\x83\xa2\xe3\x83\xb31"\
        " \xe3\x83\xa6\xe3\x83\x801')\n",
        'm.group()\n',
        'src[0]\n',
        'ord(src[0])\n',
        'ord(src[1])\n',
        "[ord(x) for x in u'\xc3\xa9']\n",
        '[ord(x) for x in src]\n',
        '[ord(x) for x in unicode(src)]\n',
        'self.bkNames.lookups\n',
        "ord('\xe2\x80\x90')\n",
        "'\xe2\x80\x90'\n",
        "u'\xe2\x80\x90'\n",
        "u'\xef\xbc\x8c'\n",
        "u':'\n",
        "u';'\n",
        'match.groupdict()\n',
        'match.groupdict().vals()\n',
        '[v for k,v in match.groupdict()]\n',
        '[v for v in match.groupdict()]\n',
        '[v for k,v in match.groupdict().items()]\n',
        '[v for k,v in match.groupdict().items() if v]\n',
        'r"\\uff0c" in src\n',
        'src = src.replace("\\uff0c", ",")\n',
        'src = re.sub(r"\\uff0c", ",", src)\n',
        're.sub(r"\\uff0c", ",", src)\n',
        "u\"\\uff0c\" in '\xe3\x83\x8f\xe3\x83\x8d 10:40\xe2\x80\x9042 ;'\n",
        "u\"\\uff0c\" in u'\xe3\x83\x8f\xe3\x83\x8d 10:40\xe2\x80\x9042 ;'\n",
        're.sub(ur"\\uff0c", ",", src)\n',
        'src = re.sub(ur"\\uff0c", ",", src)\n',
        'src = src.replace(u"\\uff0c", ",")\n',
        'u"\\uff0c" in src\n',
        '[(k,v) for k,v in match.groupdict().items() if v]\n',
        'str([(k,v) for k,v in match.groupdict().items() if v])\n',
        "u'\\u2010' in src\n",
        'ctsregexs.getregpattern(self.langkey)\n',
        'src\n',
        "src.encode('utf-8')\n",
        "src.decode('utf-8')\n",
        "match.group('chnosall')\n",
        'match\n',
        "' '\n",
        "u' '\n",
        'match.group()\n'],
        u'file:C:/Python27/Lib/site-packages/xchg/ctzr/ctsregexs.py': ['l\n',
        "bkNames.regexpbknos('31,57,65', 'f', langkey)\n",
        "bkNames.regexpbknos('31,57,65', '~f', langkey)\n",
        "bkNames.regexpbknos('63', 'f', langkey)\n",
        "bkNames.regexpbknos('63', '~f', langkey)\n",
        'singlechapterbooknamesothers\n',
        "settings.CTZDIR + '_regexps_%s.txt' % langkey\n",
        'regpattern\n'],
        u'file:C:/Python27/Lib/site-packages/xchg/ctzr/ctsvss.py': ["d['cts'"\
        "]['keys']\n",
        'd\n',
        '[v,key() for v in vsnosd]\n',
        '[v,key() for v in vsnosd.keys]\n',
        '[v,key() for v in vsnosd.keys()]\n',
        'vsnosd.keys\n',
        '[v for v in vsnosd.keys]\n',
        'print [v for v in vsnosd.keys]\n',
        'print [v for v in vsnosd.keys]vsnosd\n',
        'list(vsnosd)\n',
        'vsnos = list(vsnosd)\n',
        'vsnos.sort()\n',
        'vsnos\n',
        'bkNames\n',
        "ch['totalvss']\n",
        "','.join([str(vsno) for vsno in ch['vss']]) if len(vss) == ch['tota"\
        "lvss'] else ''\n",
        "ch['vss']\n",
        'vss\n',
        'vss[v-1]\n',
        "vss[v-1]['vsno']\n",
        'vsno > currvsno + 1\n',
        'vss.ndx.index(66022021)\n',
        'bkno != prevbkno or chno != prevchno\n',
        "bk['chs'][c]\n",
        "bk['chs'][c-1]\n",
        "bk['chs'][c-1]['full']\n",
        "ch['vss'][v-1]['vsid'] + 1\n",
        'vsno\n',
        "ch['vss'][v-1]\n",
        'vs\n',
        "vsrangecount > 2 or vsid == ch['vss'][v-1]['vsid'] + 1\n",
        'keys[-1]\n',
        'isdigit(keys[-1])\n',
        'keys[-1].isdigit()\n',
        "ch['vss'][-1]\n",
        "ch['vss'][v - 1]\n",
        "ch['full']\n",
        'ch\n',
        'bk\n'],
        u'file:C:/Python27/Lib/site-packages/xchg/nodes/download.py': ['urle'\
        'ncoded[3:]\n',
        'urlencoded[4:]\n'],
        u'file:C:/Python27/Lib/site-packages/xchg/nodes/nodes.py': ["args['i"\
        "d']\n",
        'args.id\n',
        "'id' in args\n",
        'match.start()\n',
        'src[lastmatchend:match.start()]\n',
        'stringbeforecontinuation = src[lastmatchend:match.start()]\n',
        'while stringbeforecontinuation\n',
        'i = len(stringbeforecontinuation)\n',
        'i = len(stringbeforecontinuation) - 1\n',
        "while stringbeforecontinuation[i] in [';',' '] + range(0-9): i -= 1"\
        "\n",
        'stringbeforecontinuation[i]\n',
        'range(0-9)\n',
        'range(9)\n',
        'range(10)\n',
        "stringbeforecontinuation = 'ab '\n",
        "while stringbeforecontinuation[i] in [';',' '] + range(10): i -= 1\n",
        '[str(n) for n in range(10)]\n',
        'stringbeforecontinuation\n',
        "stringbeforecontinuation = '23 '\n",
        "while stringbeforecontinuation[i] in [';',' '] + [str(n) for n in r"\
        "ange(10)]: i -= 1\n",
        'i = 3\n',
        'i = 2\n',
        'i = len(stringbeforecontinuation)-1\n',
        "while i > -1 and stringbeforecontinuation[i] in [';',' '] + [str(n)"\
        " for n in range(10)]: i -= 1\n",
        'i\n',
        'unicodedata.category(unicode(raw[0]))\n',
        'len(self)\n',
        "row['wtlibextract']\n",
        ' cts.keys\n',
        'cts.keys\n',
        'len(cts)\n',
        "row['wtlibtotalcts']\n",
        'sql\n',
        'p.parse_args()\n',
        '(*args[1:])\n',
        'args[1:]\n',
        'args\n',
        'args[0]\n',
        '*args\n',
        'dict(args)\n',
        'type(args)\n',
        'args._get_args()\n',
        'args._get_kwargs()\n',
        'args._get_kwargs()[0]\n',
        "self.kargs += ('a','b')\n",
        "self.kargs += (('a','b'))\n",
        "self.kargs += [('a','b')]\n",
        "self.kargs += ['a','b']\n",
        "self.kargs.__add__(('a','b'))\n",
        "self.kargs.__add__('a','b')\n",
        'match.group()\n',
        'unichr(src[0])\n',
        'ord(src[0])\n',
        'src[0]\n',
        'settings.PICKLED\n',
        'match.groupdict()\n',
        "u'\\u2010' in src\n",
        "'11:25-27' in src\n",
        "u'11:25-27' in src\n",
        "u'11:25\\u201027' in src\n",
        'unicode(src)\n',
        "src.decode('utf-8')\n",
        "row['body']\n",
        "row['body'].decode('utf-8')\n",
        'src\n',
        'bknames.nos[1]\n',
        'bknames.nos\n',
        "bknames.nos['ge']\n",
        "bknames.Name(1,'f','e')\n",
        "bknames.Name(1,'f','e', '1')\n",
        'bknames.Name(1)\n'],
        u'file:C:/Python27/Lib/site-packages/xchg/nodes/test.py': ['lxml.htm'\
        'l.fromstring(html).text_content()\n',
        'dir(lxml.html)\n',
        'dir(html)\n',
        'html.fromstring(s).text_content()\n',
        'str(strip_tags(html))\n',
        'html\n',
        'strip_tags(html)\n'],
        u'file:C:/Python27/Lib/site-packages/xchg/nodes/xml.py': ['doc\n',
        'html\n'],
        u'file:C:/Python27/Lib/site-packages/xchg/vss/vss.py': ['ndx[1] = 12'\
        '3\n',
        'ndx.index(123)\n',
        'ndx.append(456)\n',
        'len(ndx)\n',
        'len(456)\n',
        'ndx.index(456)\n',
        'ndx[2]\n',
        'ndx[1]\n',
        "'%03d%03d%03d' % (bkno, chno, vsno)\n",
        'ndx[40]\n',
        'ndx.index(66022021)\n',
        'vss.ndx.index(66022021)\n'],
        u'file:C:/Users/Larry/_db/_x/web2py.py': ['len(form.vars.q < 10)\n',
        'x.searchform()\n',
        'auth.user_group\n',
        'auth.user.id\n',
        'form[0]\n',
        'form[0].attributes\n',
        "form[0].attributes['name']\n",
        "not form[0].attributes['value']\n",
        "form[0].attributes['value']\n",
        "form[0].attributes['value'] == ''\n",
        "type(form[0].attributes['value'])\n",
        "form[0].attributes['value'] == None\n",
        'request.env.query_string\n',
        's = request.env.query_string\n',
        's\n',
        "s.split('&')\n",
        "params - s.split('&')\n",
        "params = s.split('&')\n",
        'params\n',
        'params[0]\n',
        "params[0][0] == 'q'\n",
        "params[0].split('=')\n",
        "params[0].split('=')[1]\n",
        "params[0].split('=')[1].strip()\n"],
        u'file:C:/xbz/xbz/bs/bs.py': ["langs.names['e']\n",
                                      'b.name\n',
                                      'sql\n'],
        u'file:C:/xbz/xbz/bz/bz.py': ['self.items()[0].asDict()\n',
                                      'dict(self.items()[0])\n',
                                      'list(self.items()[0])\n',
                                      "self.items()['e']\n",
                                      "self['e']\n",
                                      "self['e'].islive\n",
                                      '[self[k].name for k,v in self.iterite'\
                                      'ms()]\n',
                                      '[self[k].name for k,v in self.iterite'\
                                      'ms() if self[k].islive]\n',
                                      '[self[k].name for k,v in self.iterite'\
                                      'ms() if self[k].islive]items = sorted'\
                                      '(((k,v) for (k,v) in self.names.items'\
                                      '()))\n',
                                      'items = sorted(((k,v) for (k,v) in se'\
                                      'lf.names.items() if self[k].islive))\n',
                                      'items = sorted(((k,v) for (k,v) in se'\
                                      'lf.names.items()))\n',
                                      'alive = [self[k] for k,v in self.iter'\
                                      'items() if self[k].islive]\n',
                                      'items = sorted(((k,v) for (k,v) in al'\
                                      'ive.names.items()))\n',
                                      'items = sorted(((k,v) for (k,v) in al'\
                                      'ive.items()))\n',
                                      'items = sorted(((k,v) for (k,v) in al'\
                                      'ive.iteritems()))\n',
                                      'items = sorted(((k,v) for (k,v) in al'\
                                      'ive))\n',
                                      'sorted(alive)\n',
                                      'self\n',
                                      's = sorted([(value,key) for (key,valu'\
                                      'e) in self.items()])\n',
                                      '[(l[0].key,l[0].name) for l in s.item'\
                                      's()]\n',
                                      '[(l[0].key,l[0].name) for l in s]\n',
                                      'livelangs = [langs[l[1]] for l in lan'\
                                      'gssorted if langs[l[1]].islive]\n',
                                      'langnames = [(l[0].key,l[0].name) for'\
                                      ' l in livelangs]\n',
                                      'langnames = [(l.key,l.name) for l in '\
                                      'livelangs]\n',
                                      'langnames = [{l.key:l.name} for l in '\
                                      'livelangs]\n',
                                      "langnames = [{'key':l.key, 'name':l.n"\
                                      "ame} for l in livelangs]\n",
                                      'alive = [b for b in bs.iteritems() if'\
                                      ' b.islive]\n',
                                      'alive = [b for b in bs.itervalues() i'\
                                      'f b.islive]\n',
                                      "alive = [b for b in bs.itervalues() i"\
                                      "f b.islive and b.langkey == 'e']\n",
                                      "livelangbs = [b for b in bs.itervalue"\
                                      "s() if b.islive and b.langkey == lang"\
                                      "['key']]\n",
                                      "livelangbs.sort(key=lambda x:x['name'"\
                                      "])\n",
                                      "livelangbs = [b for b in bs.itervalue"\
                                      "s() if b.islive and b.langkey == 'e']"\
                                      "\n",
                                      'livelangbs.sort(key=lambda x:x.name)\n',
                                      'html\n',
                                      'import sys\n',
                                      'import os\n',
                                      'os.path\n',
                                      'os.path()\n',
                                      'sys.path()\n',
                                      'sys.path\n',
                                      "' '.join(sys.path)\n",
                                      "'c:' in ' '.join(sys.path).lower()\n",
                                      'bs\n',
                                      'self.bs\n',
                                      '[b for b in self.bs]\n',
                                      '[b for b in self.bs if b.islive]\n',
                                      "[b for b in self.bs if b['islive']]\n",
                                      '[b for bid, b in enumerate(self.bs) i'\
                                      'f b.islive]\n',
                                      '[b for bid, b in enumerate(self.bs.it'\
                                      'e if b.islive]\n',
                                      '[b for bid, b in self.bs.iteritems() '\
                                      'if b.islive]\n',
                                      '[bid for bid, b in self.bs.iteritems('\
                                      ') if b.islive]\n',
                                      'bslist = self.bs.iteritems()\n',
                                      'bslist = [b for b in self.bs.iteritem'\
                                      's()]\n',
                                      '[bid for bid, b in enunerate(bslist)]'\
                                      '\n',
                                      '[bid for bid, b in enumerate(bslist)]'\
                                      '\n',
                                      '[b for bid, b in enumerate(bslist)]\n',
                                      '[b for bid, b in enumerate(bslist) fo'\
                                      'r b.islive]\n',
                                      '[b for bid, b in enumerate(bslist) if'\
                                      ' b.islive]\n',
                                      '[b for bid, b in enumerate(bslist) if'\
                                      ' bslist[bid].islive]\n',
                                      '[b for bid, b in enumerate(bslist) if'\
                                      ' bslist[bid][1].islive]\n',
                                      '[bslist[bid][1] for bid, b in enumera'\
                                      'te(bslist) if bslist[bid][1].islive]\n',
                                      '[bid for bid, b in enumerate(bslist) '\
                                      'if bslist[bid][1].islive]\n',
                                      'bslist = [b for b in self.bs.itervalu'\
                                      'es()]\n',
                                      '[b for b in bslist if b.islive]\n',
                                      'type(bids)\n',
                                      'type(bids) == list\n',
                                      'isdigit(1)\n',
                                      "isdigit('1')\n",
                                      "'1'.isdigit()\n",
                                      "type('1')\n",
                                      'bsolr.b\n',
                                      'self.parent\n',
                                      'self.parent.cannons[b.canonid]\n',
                                      'self.parent.canons[b.canonid]\n',
                                      'canon\n',
                                      'self.canon\n',
                                      'self.canon.bkkeys.pop(0)\n',
                                      'self.canon.bkkeys\n',
                                      'b.vsndx[0]\n',
                                      'b.vsndx[1]\n',
                                      'Vs.bkChVsToInt(1,1,1)\n',
                                      'vss_sorted = sorted(vss.iteritems(), '\
                                      'key=lambda (k,v): (v,int(k)))\n',
                                      'vss_sorted = sorted(vss.iteritems(), '\
                                      'key=lambda (vsno, vs): (vs, int(vsno)'\
                                      '))\n',
                                      'vss_sorted = sorted(vss.iteritems(), '\
                                      'key=lambda (int(vsno), vs): (vs, vsno'\
                                      '))\n',
                                      'vss.iterkeys()\n',
                                      '[vss.iterkeys()]\n',
                                      '[vsno for vsno in vss.iterkeys()]\n',
                                      '[int(vsno) for vsno in vss.iterkeys()'\
                                      '].sort()\n',
                                      's = [int(vsno) for vsno in vss.iterke'\
                                      'ys()].sort()\n',
                                      's = [int(vsno) for vsno in vss.iterke'\
                                      'ys()]\n',
                                      's.sort()\n',
                                      "int('%03d%02d%03d%03d' %(bid, bkno, c"\
                                      "hno, vsno)\n",
                                      "int('%03d%02d%03d%03d' %(bid, bkno, c"\
                                      "hno, vsno))\n",
                                      'import html5lib\n',
                                      "re.split(r\"\"\"[\\s'\"[\\].,:;()*!#&"\
                                      "-_=+?<>`~{}|]+\"\"\", vs)\n",
                                      "re.split(r\"\"\"[\\s'\"[\\].,:;()*!#&"\
                                      "-_=+?<>`~{}|]+\"\"\", vs.strip())\n",
                                      "re.split(r\"\"\"[\\s'\"[\\].,:;()*!#&"\
                                      "\\-_=+?<>`~{}|]+\"\"\", vs.strip())\n",
                                      "re.split(r\"\"\"[\\s'\"[\\].,:;()*!#&"\
                                      "\\-_=+?<>`~{}|]+\"\"\", vs)\n",
                                      'vs\n',
                                      "[word for word in re.split(r\"\"\"[\\"\
                                      "s'\"[\\].,:;()*!#&\\-_=+?<>`~{}|]+\"\""\
                                      "\", vs) if word]\n"],
        u'file:C:/xbz/xbz/ctzr/ctsvss.py': ['import xbz.wingdbstub\n',
        " bk['bkkey']\n",
        "bk['bkkey']\n",
        "bkNames.renderkeys(['1c'])\n",
        "bkNames.Name(bk['bkno'])\n",
        "langs.name('e')\n",
        "langs.Name('e')\n",
        "langs.names['e']\n",
        "rows[rowid]['cols']\n",
        'rows[rowid]\n',
        "targeturlpattern % {'langkey':'e'}\n",
        "targeturlpattern.format(langkey='e')\n",
        "targeturlpattern.format(langkey='e', biblename='bible', bkkey='ge',"\
        " chno=1, bkmark='bk7')\n",
        'targeturlpattern\n',
        "'http://watchtower.org/{langkey}/{biblename}/{bkkey}/chapter_{chno}"\
        ".htm#{bkmark}'.format(langkey='e', biblename='bible', bkkey='ge', c"\
        "hno=1, bkmark='bk7')\n",
        "'http://watchtower.org/{langkey}/{biblename}/{bkkey}/chapter_{chno:"\
        "0d}.htm#{bkmark}'.format(langkey='e', biblename='bible', bkkey='ge'"\
        ", chno=1, bkmark='bk7')\n",
        "'http://watchtower.org/{langkey}/{biblename}/{bkkey}/chapter_{chno:"\
        "03d}.htm#{bkmark}'.format(langkey='e', biblename='bible', bkkey='ge"\
        "', chno=1, bkmark='bk7')\n",
        "contacts[b['pubcontactid']]\n",
        "contacts[b['b']['pubcontactid']]\n",
        "contacts[b.b['pubcontactid']]\n",
        'b\n',
        "b['b'].pubcontactid\n",
        "contacts[b.b['pubid']]\n",
        'b.b\n',
        "b['b']\n",
        "b['b']['pubid']\n",
        "b['b'].pubid\n",
        "contacts[b['b'].pubid]\n",
        "contacts[b['b'].pubid]['targeturlpattern']\n",
        'bkNames.defaulttypea\n',
        'bkNames.defaulttypea[bkno]\n',
        'rows\n',
        'len(rows)\n',
        '[r for r in rows]\n',
        '[v for k,v in rows]\n',
        '[v for k,v in rows.iteritems()]\n',
        '[rows[i] for i in range(rows)]\n',
        '[rows[i] for i in range(len(rows))]\n',
        '[rows[i] for i in range(len(rows))][0]\n',
        "vss['vss']['keys']\n",
        "vss['vss']\n",
        'vss\n',
        "vss['keys']\n",
        'bkNames.Name(bkno,langkey, bid)\n',
        'BkName.BuildNdxNoLangType(no, langkey, type)\n'],
        u'file:C:/xbz/xbz/nodes/nodes.py': ['settings\n',
        'sql\n',
        'cts.allerrors()\n',
        "src = src.decode('utf-8')\n",
        "src = src.encode('utf-8')\n",
        'type(self.q)\n',
        'unicode(self.q)\n',
        "unicode(self.q.decode('utf-8'))\n",
        "unicode(self.q.encode('utf-8'))\n",
        "unicode(self.q).encode('utf-8')\n",
        'self.q\n',
        'q = self.q\n',
        "hashlib.sha224(unicode(q).encode('utf-8')).hexdigest()\n",
        'hashlib.sha224(unicode(q)).hexdigest()\n',
        'q\n',
        'type(q)\n',
        'hashlib.sha224(q).hexdigest()\n',
        "hashlib.sha224(q.encode('utf-8')).hexdigest()\n",
        'type(src)\n',
        "src.encode('utf-8')\n",
        "src.decode('utf-8')\n",
        'src\n',
        "vssjson = cPickle.loads(row['pkl'])['cts']\n",
        '"SELECT * from bz_node %s" % where\n',
        "settings.PKLDIR + ('Vss%d.array' % canonid)\n",
        'ctvss\n',
        'from xbz.ctzr.ctvss import CtVss\n',
        'renderedvss = ctvss.render(vss)\n',
        "cts = cPickle.loads(row['pkl'])['cts']\n"],
        u'file:C:/xbz/xbz/solr/bs.py': ['bids\x0d\n',
        'self.si.delete(query = si.Q("bid:%d" % bid))\x0d\n',
        'self.si.delete(query = self.si.Q("bid:%d" % bid))\x0d\n',
        'self.si.commit()\x0d\n',
        'self.si.delete(queries = self.si.Q("bid:%d" % bid))\x0d\n',
        'SolrError(r, c)\x0d\n',
        'r.status\x0d\n',
        'vss[str(vsno)]\x0d\n',
        "u''.join([s.string for s in s.findAll(text=True)])\x0d\n\x0d\n",
        "u''.join([s.string for s in soup.findAll(text=True)])\x0d\n\x0d\n",
        "u''.join([s.string for s in soup.findAll(text=True)])\x0d\n"],
        u'file:c:/Users/Larry/_db/_x/web2py.py': ['cts.__repr__()\n'],
        u'file:c:/xbz/xbz/wtlangs/wtlangs.py': ['lang\n',
        'str(attribs)\n',
        'match.group("content")\n',
        "'content' in match\n",
        "'content' in match.groupdict()\n",
        'wtlangpage\n']},
                                 'sel-line': 9,
                                 'sel-line-start': 396,
                                 'selection_end': 430,
                                 'selection_start': 430})],
                  'split_percents': {},
                  'splits': 1,
                  'tab_location': 'top',
                  'user_data': {}},
         'window-alloc': (3460,
                          560,
                          1669,
                          451)}]}
guimgr.recent-documents = [loc('buildout.cfg')]
guimgr.visual-state = {loc('bootstrap.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('buildout.cfg'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 41,
        'sel-line-start': 610,
        'selection_end': 624,
        'selection_start': 624},
                       loc('parts/buildout/site.py'): {'attrib-starts': [],
        'first-line': 77,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('parts/buildout/sitecustomize.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('project-buildout/buildout.cfg'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 315,
        'selection_end': 322,
        'selection_start': 322}}
